% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unjoin.R
\name{unjoin}
\alias{unjoin}
\title{Splits a dataframe into two, such that it could be reassembled with a
mutating join}
\usage{
unjoin(data, by, cols, distinct = "none", names = c("left", "right"))
}
\arguments{
\item{data}{input dataframe}

\item{by}{a vector of column names which will be present in both outputs, to
rejoin the dataframes}

\item{cols}{specific columns to be present in the 'right' dataframe.
implicitly, all other columns not in 'cols' will be present in the 'left'
dataframe.}

\item{distinct}{Apply \code{\link[dplyr:distinct]{dplyr::distinct()}} to \code{"both"} dataframes, the
\code{"left"} or \code{"right"} dataframes, or \code{"none"} of the dataframes. This may
be useful if one table is a 'lookup' or metadata table that has its values
repeated many times in \code{data}.}

\item{names}{The names of the output list. If \code{NULL} the list will be
unnamed.}
}
\value{
A list of two dataframes
}
\description{
This function takes an arbitrary number of 'joining' columns and any number
of additional column names and splits a dataframe in two such that a user
could then re-join using \code{\link[=merge]{merge()}} or \code{\link[dplyr:mutate-joins]{dplyr::left_join()}}. The user may find
it appropriate to go on and apply \code{\link[=messy]{messy()}} to each new dataframe
independently to impede rejoining.
}
\details{
Real data is often found across multiple datasets. For example, in
environmental monitoring, measurements at a monitoring station may need to be
bound with metadata about the station such as geographic coordinates, or even
meteorological data from an external source, to produce desired outputs. In
clinical research it may be necessary to combine the results of a clinical
trial with relevant patient information, such as weight or sex. This function
undoes existing joins to present learners with an authentic problem to solve;
joining two independent datasets to achieve some goal.
}
\examples{
dummy <-
  dplyr::tibble(
    patient_id = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
    test = c(1, 2, 3, 1, 2, 3, 1, 2, 3),
    result = c("++", "+", "-", "--", "+", "-", "+", "++", "-"),
    sex = c("M", "M", "M", "M", "M", "M", "F", "F", "F"),
    age = c(50, 50, 50, 25, 25, 25, 30, 30, 30)
  )

unjoin(
  dummy,
  by = "patient_id",
  cols = c("sex", "age"),
  distinct = "right",
  names = c("tests", "patient_info")
)

}
\seealso{
Other data deconstructors: 
\code{\link{unrbind}()}
}
\author{
Jack Davison
}
\concept{data deconstructors}
